x
data[,x>100]
x[x>100]
u <- x > 100
u
data[,u]
data[u]
data[u,]
data[u,]["id"]
c <- data[u,]["id"]
c
class(c)
data[u,][["id"]]
corr <- function(directory, threshold = 0){
good_data <- complete(directory)
x <- good_data[,2]
u <- x > threshold
good_ids <- good_data[u,][["id"]]
good_ids
}
complete <- function(directory, id = 1:332) {
nobs <- c()
for(i in id) {
filename <- paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep="")
data <- read.csv(filename)
good <- complete.cases(data)
nobs <- c(nobs, nrow(data[good, ]))
}
result <- data.frame(id = id, nobs = nobs)
result
}
corr <- function(directory, threshold = 0){
good_data <- complete(directory)
x <- good_data[,2]
u <- x > threshold
good_ids <- good_data[u,][["id"]]
good_ids
}
corr("specdata", 100)
complete <- function(directory, id = 1:332) {
nobs <- c()
for(i in id) {
filename <- paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep="")
data <- read.csv(filename)
good <- complete.cases(data)
nobs <- c(nobs, nrow(data[good, ]))
}
result <- data.frame(id = id, nobs = nobs)
result
}
corr <- function(directory, threshold = 0){
good_data <- complete(directory)
x <- good_data[,2]
u <- x > threshold
good_ids <- good_data[u,][["id"]]
data[1:6,]
}
corr("specdata", 400)
View(data)
View(data)
complete <- function(directory, id = 1:332) {
nobs <- c()
for(i in id) {
filename <- paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep="")
data <- read.csv(filename)
good <- complete.cases(data)
nobs <- c(nobs, nrow(data[good, ]))
}
result <- data.frame(id = id, nobs = nobs)
result
}
corr <- function(directory, threshold = 0){
good_data <- complete(directory)
x <- good_data[,2]
u <- x > threshold
good_ids <- good_data[u,][["id"]]
complete.data[1:6,]
}
corr("specdata", 400)
complete <- function(directory, id = 1:332) {
nobs <- c()
for(i in id) {
filename <- paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep="")
data <- read.csv(filename)
good <- complete.cases(data)
nobs <- c(nobs, nrow(data[good, ]))
}
result <- data.frame(id = id, nobs = nobs)
result
}
corr <- function(directory, threshold = 0){
good_data <- complete(directory)
x <- good_data[,2]
u <- x > threshold
good_ids <- good_data[u,][["id"]]
complete().data[1:6,]
}
complete <- function(directory, id = 1:332) {
nobs <- c()
for(i in id) {
filename <- paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep="")
data <- read.csv(filename)
good <- complete.cases(data)
nobs <- c(nobs, nrow(data[good, ]))
}
result <- data.frame(id = id, nobs = nobs)
result
}
corr <- function(directory, threshold = 0){
good_data <- complete(directory)
x <- good_data[,2]
u <- x > threshold
good_ids <- good_data[u,][["id"]]
complete(directory).data[1:6,]
}
?cor
complete <- function(directory, id = 1:332) {
nobs <- c()
for(i in id) {
filename <- paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep="")
data <- read.csv(filename)
good <- complete.cases(data)
nobs <- c(nobs, nrow(data[good, ]))
}
result <- data.frame(id = id, nobs = nobs)
result
}
corr <- function(directory, threshold = 0){
good_data <- complete(directory)
x <- good_data[,2]
u <- x > threshold
good_ids <- good_data[u,][["id"]]
coresult <- c()
for(i in good_ids) {
filename <- paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep="")
data <- read.csv(filename)
nitrate <- data[["nitrate"]]
sulfate <- data[["sulfate"]]
coresult <- c(coresult, cor(nitrate, sulfate))
}
coresult
}
cr <- corr("specdata", 150)
head(cr)
complete <- function(directory, id = 1:332) {
nobs <- c()
for(i in id) {
filename <- paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep="")
data <- read.csv(filename)
good <- complete.cases(data)
nobs <- c(nobs, nrow(data[good, ]))
}
result <- data.frame(id = id, nobs = nobs)
result
}
corr <- function(directory, threshold = 0){
good_data <- complete(directory)
x <- good_data[,2]
u <- x > threshold
good_ids <- good_data[u,][["id"]]
coresult <- c()
for(i in good_ids) {
filename <- paste(directory, "/", formatC(i, width = 3, flag = "0"), ".csv", sep="")
data <- read.csv(filename)
good_data <- data[complete.cases(data),]
nitrate <- good_data[["nitrate"]]
sulfate <- good_data[["sulfate"]]
coresult <- c(coresult, cor(nitrate, sulfate))
}
coresult
}
cr <- corr("specdata", 150)
head(cr)
summary(cr)
cr <- corr("specdata", 400)
head(cr)
summary(cr)
submit()
submit()
submit()
x <- 1:10
if(x>5) {
x<-0
}
x
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
x <- 5
y <- if(x < 3) {
NA
} else {
10
}
y
x <- list(a = 1:5, b = rnorm(10))
x
lapply(x, mean)
x <- martix(rnorm(200), 20, 10)
x <- matrix(rnorm(200), 20, 10)
x
x
a <- array(rnorm(2*2*10), c(2,2,10))
a
f <- gl(3, 10)
f
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
x[gl]
x[[gl]]
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get, setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
a <- makeVector()
class(a)
class(a$set)
a$set(c(1,2,3,4,5,6,7))
a$get()
cachemean(a)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
invx <- NULL
set <- function(y) {
x <<- y
invx <<- NULL
}
get <- function() x
getinverse <- function() invx
setinverse <- function(inverse) invx <<- inverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
invx <- x$getinverse()
if(!is.null(invx)) {
message("getting cached inverse of the matrix")
return(invx)
}
mtrx <- x$get()
invx <- solve(mtrx)
x$setinverse(invx)
invx
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
amatrix$set(matrix(c(0,5,99,66), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$get()
amatrix$getinverse()
## Pair of functions that cache the inverse of a given matrix
## Creates a "special matrix object" which contains
## a list of specific functions for it
makeCacheMatrix <- function(x = matrix()) {
## initializing empty inverse of the matrix object
invx <- NULL
## set the value of the matrix object
set <- function(y) {
x <<- y
invx <<- NULL
}
## returns the matrix object
get <- function() x
## returns the inverse of the matrix object
getinverse <- function() invx
## sets the iverse of the matrix object
setinverse <- function(inverse) invx <<- inverse
## returning of the list containing the object's functions
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Calculates and caches the inverse of the given
## "special matrix object"
cacheSolve <- function(x, ...) {
## return a matrix that is the inverse of 'x'
invx <- x$getinverse()
## checking if the inverse was cached already and return it
if(!is.null(invx)) {
message("getting cached inverse of the matrix")
return(invx)
}
## getting the given "special matrix object"
mtrx <- x$get()
## inversing of the given "special matrix object"
invx <- solve(mtrx)
## making inverse cached in the "special matrix object"
x$setinverse(invx)
## return the inverse
invx
}
amatrix = makeCacheMatrix(matrix(c(1,2,3,4), nrow=2, ncol=2))
amatrix$get()
cacheSolve(amatrix)
amatrix$getinverse()
cacheSolve(amatrix)
setwd("~/GitHub/RepData_PeerAssessment1")
data <- read.csv(unz("activity.zip", "activity.csv"))
head(data)
str(data)
data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("numeric", "character", "numeric"))
str(data)
names(data)
data$date <- strptime(data$date, format = "%Y-%m-%d")
data$date <- strptime(data$date, format = "%Y-%m-%d", tz = "GMT")
str(date)
str(data)
data$date
names(data)
data$date <- strptime(data$date, format = "%Y-%m-%d")
str(data)
hist(data$steps)
hist(sum(data$steps))
library(dplyr)
hist(data$date)
data1 <- data %.%
group_by(date) %.%
summarise(total = sum(steps), mean = mean(steps), median = median(steps))
median(data$steps)
data1 <- data[complete.cases(data),]
data1 <- data[,complete.case(data)]
data1 <- data[,complete.cases(data)]
complete.cases(data)
is.na(data)
complete.cases(data)
str(data)
data1 <- na.omit(data)
str(data1)
str(data)
median(data1$steps)
str(data1$steps)
max(data1$steps)
data1 <- data %.%
group_by(date)
data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("numeric", "character", "numeric"))
data1 <- data %.%
group_by(date)
head(data1)
data1 <- data %.%
group_by(date) %.%
summarise(total = sum(steps))
head(data1)
str(data1)
hist(data1)
hist(data1$total)
```{r}
data1 <- data %.%
group_by(date) %.%
summarise(total = sum(steps), mean = mean(steps), median = median(steps))
head(data1)
data1 <- na.omit(data)
data1 <- data1 %.%
group_by(date) %.%
summarise(total = sum(steps), mean = mean(steps), median = median(steps))
head(data1)
data <- read.csv(unz("activity.zip", "activity.csv"), colClasses = c("numeric", "character", "numeric"))
data1 <- na.omit(data)
data1 <- data1 %.%
group_by(date) %.%
summarise(total = sum(steps))
head(data1)
median(data1$total)
hist(data$total)
hist(data1$total)
hist(data1$total, main = "Histogram of the total number of steps taken each day")
str(data)
summary(data)
head(data)
data2 <- data %.%
group_by(interval) %.%
summarise(mean = mean(steps, na.rm = T))
plot(data2$interval, data2$mean)
data2 <- data %.%
group_by(interval) %.%
summarise(mean = mean(steps, na.rm = T))
plot(data2$interval, data2$mean, type = "l")
data2 <- data %.%
group_by(interval) %.%
summarise(mean = mean(steps, na.rm = T))
plot(data2$interval, data2$mean, type = "l", main = "Time Series Plot per
5-minute interval", xlab = "5-minute intervals", ylab = "Average number of
steps taken")
data2[which.max(data2$mean), data2$interval]
names(data2)
data2[which.max(data2$mean), "interval"]
head(data2)
date.means <- data %.%
group_by(date) %.%
summarise(mean = mean(steps, na.rm = T))
head(date.means)
head(data2)
new.data <- data
for (value in 1:length(data$steps)) {
if is.na(data[value, "steps"]) {
new.data[value, "steps"] <- data2[value, "mean"]
}
}
new.data <- data
for (value in 1:length(data$steps)) {
if (is.na(data[value, "steps"])) {
new.data[value, "steps"] <- data2[value, "mean"]
}
}
str(new.data)
sum(is.na(new.data))
sum(is.na(new.data$steps))
new.data <- data
for (value in c(1:length(data$steps))) {
if (is.na(data[value, "steps"])) {
new.data[value, "steps"] <- data2[value, "mean"]
}
}
sum(is.na(new.data$steps))
sum(is.na(data2$mean))
new.data <- data
for (value in c(1:length(data$steps))) {
if (is.na(data[value, "steps"])) == TRUE {
new.data[value, "steps"] <- data2[value, "mean"]
}
}
new.data <- data
for (value in c(1:length(data$steps))) {
if (is.na(data[value, "steps"]) == TRUE) {
new.data[value, "steps"] <- data2[value, "mean"]
}
}
sum(is.na(new.data$steps))
data2[5, "mean"]
class(data2[5, "mean"])
new.data <- data
for (value in c(1:length(data$steps))) {
if (is.na(new.data[value, "steps"]) == TRUE) {
new.data[value, "steps"] <- data2[value, "mean"]
}
}
sum(is.na(new.data$steps))
new.data <- data
for (value in c(1:nrow(data))) {
if (is.na(new.data[value, "steps"]) == TRUE) {
new.data[value, "steps"] <- data2[value, "mean"]
}
}
sum(is.na(new.data$steps))
is.na(new.data[5, "steps"])
is.na(data[5, "steps"])
data2[5, "mean"]
new.data <- data
for (value in c(1:nrow(data))) {
if (is.na(data[value, "steps"]) == TRUE) {
new.data[value, "steps"] <- as.numeric(data2[value, "mean"])
}
}
sum(is.na(new.data$steps))
c(1:nrow(data))
new.data <- data
for (value in c(1:nrow(data))) {
if (is.na(data[value, "steps"]) == TRUE) {
new.data[value, "steps"] <- as.numeric(data2[value, "mean"])
}
}
head(new.data)
new.data <- data
for (value in c(1:nrow(data))) {
print(value)
if (is.na(data[value, "steps"]) == TRUE) {
print(data[value, "steps"])
new.data[value, "steps"] <- as.numeric(data2[value, "mean"])
print(new.data[value, "steps"])
}
}
nrow(data)
nrow(data2)
head(data)
head(data2)
tail(data)
tail(data2)
str(data)
